{"version":3,"sources":["List.js","Controller.js","App.js","serviceWorker.js","index.js"],"names":["List","props","useState","isConfirm","setIsConfirm","el","done","style","textDecoration","title","type","className","onClick","doneTodo","id","borderRadius","buttonUp","index","first","disabled","upDownTodo","buttonDown","last","color","fontsize","padding","border","margin","deleteTodo","Controller","inputTask","setInputTask","placeholder","value","onChange","e","target","addTodo","deleteAllTodos","restoreAllTodos","width","height","viewBox","fill","xmlns","d","fillRule","arr","App","list","setList","result","filter","i","map","dir","length","temp","backgroundColor","Date","toLocaleDateString","toLocaleTimeString","push","Math","random","window","confirm","key","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e7183709.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\n\nfunction List(props) {\n\n    const [isConfirm, setIsConfirm] = useState(true)\n\n    const buttonUp = () => {\n        if (props.index === props.first) buttonUp.disabled = true\n        else props.upDownTodo(props.index, 'up')\n    }\n\n    const buttonDown = () => {\n        if (props.index === props.last) buttonDown().disabled = true\n        props.upDownTodo(props.index, 'down')\n    }\n\n    const confirmDeleteYes = () => {\n        setIsConfirm(!isConfirm)\n    }\n\n    const confirmDeleteNo = () => {\n        setIsConfirm(true)\n    }\n\n    return (\n        <div>\n            <br/>\n            <li>\n                {props.el.done ? <span>✅<span\n                        style={{textDecoration: \"line-through\"}}>{props.el.title}</span></span> :\n                    props.el.title}\n                {' '}\n                {isConfirm ? <>\n                    <button type=\"button\" className=\"btn btn-outline-danger\"\n                            onClick={confirmDeleteYes}>Delete\n                    </button>\n                    {' '}\n                    <button type=\"button\" className=\"btn btn-outline-info\"\n                            onClick={() => props.doneTodo(props.el.id)}>{props.el.done ? 'Undone' : 'Done'}</button>\n                    {' '}\n                    <button type=\"button\" className=\"btn btn-secondary\" style={{borderRadius: 50}}\n                            onClick={buttonUp}\n                            disabled={props.first}>⬆\n                    </button>\n                    {' '}\n                    <button type=\"button\" className=\"btn btn-secondary\" style={{borderRadius: 50}}\n                            onClick={buttonDown}\n                            disabled={props.last}>⬇\n                    </button>\n                </> : <>\n                    <strong style={{\n                        color: \"#3acad4\",\n                        fontsize: '20px',\n                        padding: '10px',\n                        border: '1px solid lightgray',\n                        margin: '10px'\n                    }}>Are\n                        you sure?\n                    </strong>\n                    {' '}\n                    <button type=\"button\" className=\"btn btn-danger\" style={{borderRadius: 10}}\n                            onClick={() => props.deleteTodo(props.el.id)}>Yes\n                    </button>\n                    {' '}\n                    <button type=\"button\" className=\"btn btn-secondary\" style={{borderRadius: 10}}\n                            onClick={confirmDeleteNo}>No\n                    </button>\n                </>}\n            </li>\n        </div>\n    );\n}\n\nexport default List;\n","import React, {useState} from 'react';\n\n\nfunction Controller(props) {\n\n    const [inputTask, setInputTask] = useState('')\n\n    const addNewTodo = () => {\n        props.addTodo(inputTask)\n        setInputTask('')\n    }\n\n\n    return (\n        <div>\n\n            <input type='text' placeholder='new todo' value={inputTask} onChange={(e) => setInputTask(e.target.value)}/>\n            {' '}\n            <button type=\"button\" className=\"btn btn-info\" onClick={addNewTodo}>Add new</button>\n            {' '}\n            <button type=\"button\" className=\"btn btn-danger\" onClick={props.deleteAllTodos}>Delete All</button>\n            {' '}\n            <button type=\"button\" className=\"btn btn-secondary\" onClick={props.restoreAllTodos}>Restore All\n                <svg width=\"1.5em\" height=\"1.5em\" viewBox=\"0 0 16 16\" className=\"bi bi-trash\" fill=\"currentColor\"\n                     xmlns=\"http://www.w3.org/2000/svg\">\n                    <path\n                        d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/>\n                    <path fillRule=\"evenodd\"\n                          d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/>\n                </svg>\n            </button>\n\n\n        </div>\n    );\n}\n\nexport default Controller;\n","import React, {useState} from 'react';\nimport List from \"./List\";\nimport Controller from \"./Controller\";\n\nlet arr = [];\n\nfunction App() {\n    //\n    // const initList = [\n    //     {id: 0, title: 'learn JS', done: false},\n    //     {id: 1, title: 'learn React', done: false},\n    // ]\n\n    const [list, setList] = useState([])\n\n\n    const addTodo = (inputTask) => {\n        const result = [...list]\n        result.push({id: Math.random(), title: inputTask, done: false})\n        setList(result)\n    }\n\n    const deleteTodo = (id) => {\n        const result = list.filter((el, i) => el.id !== id)\n        setList(result)\n    }\n\n    const deleteAllTodos = () => {\n        if (window.confirm(\"Do you really want to delete all?\")) {\n            arr.push(...list);\n            setList([]);\n        }\n    }\n\n    const restoreAllTodos = () => {\n        setList(arr)\n        arr = [];\n    }\n\n\n    const doneTodo = (id) => {\n        let result = list.map((el, i) => {\n            if (el.id === id) return {...el, done: !el.done}\n            return el;\n        })\n        setList(result)\n    }\n\n    const upDownTodo = (index, dir) => {\n        const result = [...list]\n        for (let i = 0; i < result.length; i++) {\n            if (index === i) {\n                let temp = result[i];\n                if (dir === 'up') {\n                    result[i] = result[i - 1];\n                    result[i - 1] = temp;\n                }\n                if (dir === 'down') {\n                    result[i] = result[i + 1];\n                    result[i + 1] = temp;\n                }\n            }\n        }\n        setList(result);\n    }\n\n\n    return (\n        <div className=\"container\">\n            <br/>\n            <h3 style={{backgroundColor: \"#3acad4\", color: \"red\", padding: 5, width: 850}}>ToDo List</h3>\n\n            <strong><span>{(new Date()).toLocaleDateString()}</span></strong>\n            <strong><p><span>{(new Date()).toLocaleTimeString()}</span></p></strong>\n            <br/>\n\n            <Controller addTodo={addTodo} deleteAllTodos={deleteAllTodos} restoreAllTodos={restoreAllTodos}/>\n\n            {list.map((el, i) => <List key={Math.random()} el={el} deleteTodo={deleteTodo} doneTodo={doneTodo} upDownTodo={upDownTodo}\n                                       first={i === 0} last={i === list.length - 1} index={i} />)}\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}